#!/usr/bin/env python3
# -*- coding: utf-8 -*-

#  Copyright (C) 2010 - Gustavo Serra Scalet <gsscalet@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

__AUTHOR__ = "Gustavo Serra Scalet <gsscalet@gmail.com>"
__VERSION__ = "0.4"

import re, sys
from os import path, rename

MIN_ARGS = 2

class renomRegex:
    """
    Rename files obeying a regex substitution
    """

    def __init__(self, regex, sub):
        self.__regex = re.compile(regex)
        self.__sub = sub
        self.__old_files = []
        self.__new_files = []

    def addFile(self, f):
        if not path.isfile(f) and not path.isdir(f):
            raise Exception("File '%s' was not found" % f)
        self.__old_files.append(f)
        self.__new_files.append(self.__regex.sub(self.__sub, f))

    def isUpdatable(self):
        return self.__new_files != self.__old_files

    def writeChanges(self):
        for old, new in zip(self.__old_files, self.__new_files):
            if old != new:
                try:
                    rename(old, new)
                except:
                    print("Failed on file '%s' to '%s'" % (old, new))
                    return False
        return True

    def dump(self):
        print("Dumping the internal structures:")
        print("old: %s\nnew: %s" % (repr(self.__old_files),
                                    repr(self.__new_files)))

    # iteration properties
    __last_index = 0
    def __iter__(self):
        return self
    def __next__(self):
        if self.__last_index == len(self.__old_files):  # ready to reset
            self.__last_index = 0
            raise StopIteration

        ret = (self.__old_files[self.__last_index], self.__new_files[self.__last_index])
        self.__last_index = self.__last_index + 1
        return ret

if __name__ == "__main__":
    from sys import argv, exit
    from os import sep
    from optparse import OptionParser

    options = {
        # 'one_letter_option' : ['full_option_name',
            # "Help",
            # default_value],
        'd' : ['dump',
            "Dump internal structures",
            False],
        'q' : ['quiet',
            "Less verbose",
            False],
        'w' : ['write',
            "Do the changes",
            False],
    }

    options_list = ' '.join(["[-%s --%s]" % (o, options[o][0]) for o in options])
    desc = renomRegex.__doc__.replace('    ','')
    parser = OptionParser("%%prog %s REGEX SUB_EXPRESSION [file1 file2 file3 ...]" % options_list,
            description=desc,
            version="%%prog %s" % __VERSION__)

    for o in options:
        shorter = '-' + o
        longer = '--' + options[o][0]
        if type(options[o][2]) is bool:
            parser.add_option(shorter, longer, dest=o, help=options[o][1],
                action="store_true", default=options[o][2])
        elif type(options[o][2]) is str:
            parser.add_option(shorter, longer, dest=o, help=options[o][1],
                action="store", type="string", default=options[o][2])

    (opt, args) = parser.parse_args(argv)
    if len(args) < MIN_ARGS + 1:
        # not enough arguments
        print("""ERROR: not enough arguments.
Try `%s --help' for more information""" % args[0].split(sep)[-1])
        exit(1)

    renamer = renomRegex(args[1], args[2])
    for f in args[3:]:
        renamer.addFile(f)

    if opt.d:
        renamer.dump()

    if not renamer.isUpdatable():
        if not opt.q:
            print("No new file to rename")
        exit(2)

    if not opt.q:
        print("At least one file can be updated:")
        for old, new in renamer:
            if old != new:
                print(" %s => %s" % (old, new))

    if opt.w:
        if not renamer.writeChanges():
            print("Writing on one file failed!")
            exit (3)

        if not opt.q:
            print("Hope you made the correct replacement ;-)")
    else:
        print(" (use the --write option to write the changes)")
    exit(0)

